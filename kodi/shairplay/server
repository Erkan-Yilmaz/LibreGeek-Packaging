	httpd->max_connections = max_connections;
	httpd->connections = calloc(max_connections, sizeof(http_connection_t));
	if (!httpd->connections) {
	httpd->logger = logger;
	memcpy(&httpd->callbacks, callbacks, sizeof(httpd_callbacks_t));
	httpd->running = 0;
	httpd->joined = 1;
		free(httpd->connections);
	for (i=0; i<httpd->max_connections; i++) {
		if (!httpd->connections[i].connected) {
	if (i == httpd->max_connections) {
		logger_log(httpd->logger, LOGGER_INFO, "Max connections reached");
	httpd->open_connections++;
	httpd->connections[i].socket_fd = fd;
	httpd->connections[i].connected = 1;
	httpd->connections[i].user_data = httpd->callbacks.conn_init(httpd->callbacks.opaque, local, local_len, remote, remote_len);
	logger_log(httpd->logger, LOGGER_INFO, "Accepted %s client on socket %d",
	httpd->callbacks.conn_destroy(connection->user_data);
	httpd->open_connections--;
		MUTEX_LOCK(httpd->run_mutex);
		if (!httpd->running) {
			MUTEX_UNLOCK(httpd->run_mutex);
		MUTEX_UNLOCK(httpd->run_mutex);
		if (httpd->open_connections < httpd->max_connections) {
			if (httpd->server_fd4 != -1) {
				FD_SET(httpd->server_fd4, &rfds);
				if (nfds <= httpd->server_fd4) {
					nfds = httpd->server_fd4+1;
			if (httpd->server_fd6 != -1) {
				FD_SET(httpd->server_fd6, &rfds);
				if (nfds <= httpd->server_fd6) {
					nfds = httpd->server_fd6+1;
		for (i=0; i<httpd->max_connections; i++) {
			if (!httpd->connections[i].connected) {
			socket_fd = httpd->connections[i].socket_fd;
			logger_log(httpd->logger, LOGGER_INFO, "Error in select");
		if (httpd->open_connections < httpd->max_connections &&
		    httpd->server_fd4 != -1 && FD_ISSET(httpd->server_fd4, &rfds)) {
			ret = httpd_accept_connection(httpd, httpd->server_fd4, 0);
		if (httpd->open_connections < httpd->max_connections &&
		    httpd->server_fd6 != -1 && FD_ISSET(httpd->server_fd6, &rfds)) {
			ret = httpd_accept_connection(httpd, httpd->server_fd6, 1);
		for (i=0; i<httpd->max_connections; i++) {
			http_connection_t *connection = &httpd->connections[i];
			logger_log(httpd->logger, LOGGER_DEBUG, "Receiving on socket %d", connection->socket_fd);
				logger_log(httpd->logger, LOGGER_INFO, "Connection closed for socket %d", connection->socket_fd);
				logger_log(httpd->logger, LOGGER_INFO, "Error in parsing: %s", http_request_get_error_name(connection->request));
				httpd->callbacks.conn_request(connection->user_data, connection->request, &response);
							logger_log(httpd->logger, LOGGER_INFO, "Error in sending data");
						logger_log(httpd->logger, LOGGER_INFO, "Disconnecting on software request");
					logger_log(httpd->logger, LOGGER_INFO, "Didn't get response");
				logger_log(httpd->logger, LOGGER_DEBUG, "Request not complete, waiting for more data...");
	for (i=0; i<httpd->max_connections; i++) {
		http_connection_t *connection = &httpd->connections[i];
		logger_log(httpd->logger, LOGGER_INFO, "Removing connection for socket %d", connection->socket_fd);
	if (httpd->server_fd4 != -1) {
		shutdown(httpd->server_fd4, SHUT_RDWR);
		closesocket(httpd->server_fd4);
		httpd->server_fd4 = -1;
	if (httpd->server_fd6 != -1) {
		shutdown(httpd->server_fd6, SHUT_RDWR);
		closesocket(httpd->server_fd6);
		httpd->server_fd6 = -1;
	logger_log(httpd->logger, LOGGER_INFO, "Exiting HTTP thread");
	MUTEX_LOCK(httpd->run_mutex);
	if (httpd->running || !httpd->joined) {
		MUTEX_UNLOCK(httpd->run_mutex);
	httpd->server_fd4 = netutils_init_socket(port, 0, 0);
	if (httpd->server_fd4 == -1) {
		logger_log(httpd->logger, LOGGER_ERR, "Error initialising socket %d", SOCKET_GET_ERROR());
		MUTEX_UNLOCK(httpd->run_mutex);
	httpd->server_fd6 = netutils_init_socket(port, 1, 0);
	if (httpd->server_fd6 == -1) {
		logger_log(httpd->logger, LOGGER_WARNING, "Error initialising IPv6 socket %d", SOCKET_GET_ERROR());
		logger_log(httpd->logger, LOGGER_WARNING, "Continuing without IPv6 support");
	if (httpd->server_fd4 != -1 && listen(httpd->server_fd4, backlog) == -1) {
		logger_log(httpd->logger, LOGGER_ERR, "Error listening to IPv4 socket");
		closesocket(httpd->server_fd4);
		closesocket(httpd->server_fd6);
		MUTEX_UNLOCK(httpd->run_mutex);
	if (httpd->server_fd6 != -1 && listen(httpd->server_fd6, backlog) == -1) {
		logger_log(httpd->logger, LOGGER_ERR, "Error listening to IPv6 socket");
		closesocket(httpd->server_fd4);
		closesocket(httpd->server_fd6);
		MUTEX_UNLOCK(httpd->run_mutex);
	logger_log(httpd->logger, LOGGER_INFO, "Initialized server socket(s)");
	httpd->running = 1;
	httpd->joined = 0;
	THREAD_CREATE(httpd->thread, httpd_thread, httpd);
	MUTEX_UNLOCK(httpd->run_mutex);
	MUTEX_LOCK(httpd->run_mutex);
	running = httpd->running || !httpd->joined;
	MUTEX_UNLOCK(httpd->run_mutex);
	MUTEX_LOCK(httpd->run_mutex);
	if (!httpd->running || httpd->joined) {
		MUTEX_UNLOCK(httpd->run_mutex);
	httpd->running = 0;
	MUTEX_UNLOCK(httpd->run_mutex);
	THREAD_JOIN(httpd->thread);
	MUTEX_LOCK(httpd->run_mutex);
	httpd->joined = 1;
	MUTEX_UNLOCK(httpd->run_mutex);
