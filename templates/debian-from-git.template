#!/bin/bash
# -------------------------------------------------------------------------------
# Author:	Michael DeGuzis
# Git:		https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:	debian-from-git.template
# Script Ver:	1.2.0
# Description:	Point of reference template for packages that are built from 
#               upstream git repositories. They must* contain a debian folder.
#
# See:		http://www.cyberciti.biz/faq/linux-unix-formatting-dates-for-display/
# Usage:	n/a
# -------------------------------------------------------------------------------

arg1="$1"
scriptdir=$(pwd)
time_start=$(date +%s)
time_stamp_start=(`date +"%T"`)

# upstream URL
git_url="GITURL"
git_branch="master"

# package vars
date_long=$(date +"%a, %d %b %Y %H:%M:%S %z")
date_short=$(date +%Y%m%d)
pkgname="PKGNAME"
pkgver="${date_short}+git"
pkgrev="1"
dist_rel="STEAMOS-RELEASE"
uploader="SteamOS-Tools Signing Key <mdeguzis@gmail.com>"
maintainer="YOUR_NAME"

# set build_dir
build_dir="$HOME/build-${pkgname}-temp"
git_dir="${build_dir}/${pkgname}"

install_prereqs()
{
	clear
	echo -e "==> Installing prerequisites for building...\n"
	sleep 2s
	# install basic build packages
	sudo apt-get install -y --force-yes build-essential pkg-config checkinstall bc python \
	cmake

}

main()
{
	
	# create build_dir
	if [[ -d "$build_dir" ]]; then
	
		sudo rm -rf "$build_dir"
		mkdir -p "$build_dir"
		
	else
		
		mkdir -p "$build_dir"
		
	fi
	
	# enter build dir
	cd "$build_dir" || exit

	# install prereqs for build
	install_prereqs
	
	# Clone upstream source code
	
	echo -e "\n==> Obtaining upstream source code\n"
	
	git clone -b "$git_branch" "$git_url" "$git_dir"
 
	#################################################
	# Build platform
	#################################################
	
	echo -e "\n==> Creating original tarball\n"
	sleep 2s

	
	# create the tarball from latest tarball creation script
	# use latest revision designated at the top of this script
	
	# create source tarball
	tar -cvzf "${pkgname}_${pkgver}.orig.tar.gz" "${pkgname}"
	
	# emter source dir
	cd "${pkgname}"
	
	# Create basic changelog
	# Please* ammend/change the bulleted lines as you see fit!
	
	# (Optional) - Add full or truncated (todo) commits to changelog
	# Remove $commits_* var from changelog.in if you do not wish to include these
	# Note that the var must only* be on TAB in, as it is formatted with the 
	# prerequisite two spaces and *
	commits_full=$(git log --pretty=format:"  * %h %s")
	
	cat <<-EOF> changelog.in
	$pkgname ($pkgver) $dist_rel; urgency=low

	  * Packaged deb for SteamOS-Tools
	  * See: packages.libregeek.org
	  * Upstream authors and source: $git_url
	$commits_full
	
	 -- $uploader $date_long
	
	EOF
	
	# Perform a little trickery to update existing changelog
	cat 'changelog.in' | cat - debian/changelog > temp && mv temp debian/changelog
	
	# open debian/changelog and update
	echo -e "\n==> Opening changelog for confirmation/changes. Please do NOT include a revision number"
	sleep 3s
	nano debian/changelog
 
 	rm -f changelog_tmp.txt
 
	#################################################
	# Build Debian package
	#################################################

	echo -e "\n==> Building Debian package ${pkgname} from source\n"
	sleep 2s

	dpkg-buildpackage -rfakeroot -us -uc

	#################################################
	# Post install configuration
	#################################################
	
	#################################################
	# Cleanup
	#################################################
	
	# clean up dirs
	
	# note time ended
	time_end=$(date +%s)
	time_stamp_end=(`date +"%T"`)
	runtime=$(echo "scale=2; ($time_end-$time_start) / 60 " | bc)
	
	# output finish
	echo -e "\nTime started: ${time_stamp_start}"
	echo -e "Time started: ${time_stamp_end}"
	echo -e "Total Runtime (minutes): $runtime\n"

	
	# assign value to build folder for exit warning below
	build_folder=$(ls -l | grep "^d" | cut -d ' ' -f12)
	
	# back out of build temp to script dir if called from git clone
	if [[ "$scriptdir" != "" ]]; then
		cd "$scriptdir" || exit
	else
		cd "$HOME" || exit
	fi
	
	# inform user of packages
	echo -e "\n############################################################"
	echo -e "If package was built without errors you will see it below."
	echo -e "If you don't, please check build dependcy errors listed above."
	echo -e "############################################################\n"
	
	echo -e "Showing contents of: ${build_dir}/build: \n"
	ls ${build_dir}| grep -E *.deb

	echo -e "\n==> Would you like to transfer any packages that were built? [y/n]"
	sleep 0.5s
	# capture command
	read -erp "Choice: " transfer_choice
	
	if [[ "$transfer_choice" == "y" ]]; then
	
		# cut files
		if [[ -d "${build_dir}" ]]; then
			scp ${build_dir}/*.deb mikeyd@archboxmtd:/home/mikeyd/packaging/SteamOS-Tools/incoming

		fi
		
	elif [[ "$transfer_choice" == "n" ]]; then
		echo -e "Upload not requested\n"
	fi

}

# start main
main
